import os
import sys
import csv
import json
import random
from random import choice
from jinja2 import Environment, select_autoescape, FileSystemLoader

TOPOLOGY_PATH = "../MulVAL_P/"
REAL_ATTACK_TOPOLOGY = "real_topology_1.P" #トポロジ変更する場合、書き換え必要
REAL_ATTACK_TOPOLOGY_VERSION = "1" #上記のトポロジインデックスと一致する必要あり

#テンプレート分離型
env = Environment(loader=FileSystemLoader(TOPOLOGY_PATH), autoescape=select_autoescape('P')) #jinja2:Environment(テンプレートファイル配置ディレクトリのルート,select_autoescape()内はリストで渡した拡張子Pの特殊記号を自動的にエスケープ)
#テンプレート環境が作成され,テンプレートフォルダーで テンプレートを検索するローダーが作成
template = env.get_template(REAL_ATTACK_TOPOLOGY) #テンプレートをロード

def read_vul_info(): #値を保持する関数
    info_list = [] #infoリストを作成
    vul_file = open("vul_info.txt") #vul_info.txtファイルを開く(decode_nmap.pyにより正規表現にデコードされたvul_info.txt)
    for line in vul_file: #1行ずつ抽出
        line = line.strip('\n') #改行を削除
        info_list.append(line) #リストに追加
    vul_file.close() #ファイルを閉じる
    return info_list #リストを返す

def read_scan_config(): #scan_configを読み込む関数
    host_list = [] #hostリストを作成
    ip_list = [] #ipアドレスリストを作成
    with open('scan_config.csv', 'r') as csvfile: #scan_config.csvを開く
        csv_read = csv.reader(csvfile) #csvを読み込む
        for i in csv_read: #1つずつ抽出
            host_list.append(i[0]) #host名をリストに格納
            ip_list.append(i[1]) #ipアドレスをリストに格納
    return host_list, ip_list #リストを返す

def deJsonTop_v1(webTemp, fileTemp): #web,fileのみのver1の攻撃経路を記録する関数
    baiscFile = open('./attack.P', 'w') #attack.Pを開く
    attack_temp = template.render(CVE_Id_Web=webTemp[2], CVE_Id_File=fileTemp[2]) #real_topology_1.PのCVE_Id_Web,CVE_Id_Fileをnmapの実行結果に置き換え
    #Temp[2]の2は、nmapの実行結果から抽出したCVE脆弱性情報を指す

    baiscFile.write(attack_temp) #attack.Pに書き込む
    baiscFile.close() #ファイルを閉じる

    print("Generate scan topology v1 P file successfully") #出力:スキャントポロジv1 Pファイルを正常に生成

def deJsonTop_v2(webTemp, fileTemp, fireTemp): #web,file,firewallのv2の攻撃経路を記録する関数
    baiscFile = open('./attack.P', 'w') #attack.Pを開く
    attack_temp = template.render(CVE_Id_Web=webTemp[2], CVE_Id_File=fileTemp[2], CVE_Id_Fire=fireTemp[2]) #

    baiscFile.write(attack_temp) #attack.Pに書き込む
    baiscFile.close() #ファイルを閉じる

    print("Generate scan topology v2 P file successfully") #出力:スキャントポロジv2 Pファイルを正常に生成


if __name__ == "__main__":
    webTemp = [] #web脆弱性のテンプレート
    fileTemp = [] #file脆弱性のテンプレート
    fireTemp = [] #firewall脆弱性のテンプレート
    host_list = read_scan_config()[0] #scan_configの1列目をリストに
    ip_list = read_scan_config()[1] #scan_configの2列目をリストに
    count_ip = 0 #scan_configの行数(サーバやステーションの数)

    for host in host_list: #scan_configの1列目を1行ずつ抽出
        print("Run Nmap on target '{}' ({})...".format(host, ip_list[count_ip].strip()))  #出力:Nmapをターゲットネットワークに起動中
        if host == 'webServer': #ホスト名がwebserverの場合
            os.system('sudo nmap -sV -oX ./--version-all --script vuln ' + ip_list[count_ip] + ' -oN nmap.txt') #nmap実行
            status = os.system('python2 decode_nmap.py') #XMLのnmap.txtをvul_info.txtに変換
            if os.WEXITSTATUS(status) != 0: #プロセスカウントが0でない場合
                print("ERROR: Nmap encountered a problem") #出力:Nmapで問題が発生しました
                sys.exit(1) #プログラム終了
            webTemp = read_vul_info() #テンプレートに書き込み
        if host == 'fileServer': #ホスト名がfileserverの場合
            os.system('sudo nmap -sV -oX ./--version-all --script vuln ' + ip_list[count_ip] + ' -oN nmap.txt') #nmap実行
            status = os.system('python2 decode_nmap.py') #statusを元の形式に戻す
            if os.WEXITSTATUS(status) != 0: #プロセスカウントが0でない場合
                print("ERROR: Nmap encountered a problem") #出力:Nmapで問題が発生しました
                sys.exit(1) #プログラム終了
            fileTemp = read_vul_info() #テンプレートに書き込み
        if host == 'fireWall': #hostがfirewallの場合
            os.system('sudo nmap -sV -oX ./--version-all --script vuln ' + ip_list[count_ip] + ' -oN nmap.txt') #nmap実行
            status = os.system('python2 decode_nmap.py') #statusを元の形式に戻す
            if os.WEXITSTATUS(status) != 0: #プロセスカウントが0でない場合
                print("ERROR: Nmap encountered a problem") #出力:Nmapで問題が発生しました
                sys.exit(1) #プログラム終了
            fireTemp = read_vul_info() #テンプレートに書き込み
        count_ip = count_ip + 1 #次の行へ

    if REAL_ATTACK_TOPOLOGY_VERSION == '1': #real_topology1か
        deJsonTop_v1(webTemp, fileTemp)
    if REAL_ATTACK_TOPOLOGY_VERSION == '2': #real_topology2か
        deJsonTop_v2(webTemp, fileTemp, fireTemp)
